------------------------------------------------2020-06-16----------------------------------------------------------------
렌더링
[ReactDOM.render(Element, 렌더링 할 DOM위치)]

- 실제 DOM 노드즉, div,h2 같은 태그를 만들지 않고 대신에 DOM 노드를 서술하는
    자바스크립트 객체를 만든다.
- createElement() 함수에서 반환된 자바스크립트 객체가 실제 DOM 노드로 렌더링 되는데,
    그것은 ReactDOM.render(Element 혹은 JSX, 컨테이너) 메소드와 동일하다.
- render의 첫번째 인자는 대문자로 명시하면 리액트 컴포넌트를 의미하고, 소문자로
    명시하면 HTML 태그(자바스크립트 객체)를 의미한다.
- 리액트는 실제 DOM을 다루는게 아니라 DOM에 매핑되는 자바스크립트 객체를 
    다룬다는 것이 Virtual DOM(가상돔)의 핵심 개념이다.
- 만일 특정한 속성을 수정하게 되면 자바스크립트 객체에서 바뀐 부분을 찾는다.
    DOM에서 찾는게 아니라 메모리에 올라간 자바스크립트 객체에서 바뀐 부분을
    비교 검색하기 때문에 실제 DOM을 다루는 것보다 훨씬 빠르게 업데이트가
    가능해진다.
- 처음에 한번 전체 DOM을 렌더링 한 이후에는 필요한 부분만 업데이트 하게 된다.
- 메모리에 올라간 자바스크립트 객체에서 변경된 부분을 찾은 후 매핑되는 DOM만 
    업데이트 하는 방식이다.


DOM과 Virtual DOM
[DOM이란]
- DOM이란 (Document Object Model)의 약자로 객체를 통해 구조화된 문서를 표현하는 방법이다.
- DOM은 트리형태로 되어 있어서 특정 node를 찾을 수도 있고 수정하거나 제거할 수 있다.
- DOM은 동적인 UI에 최적화가 되어 있지 않기 때문에 jQuery등의 라이브러리를 사용하여 동적인
    효과를 줄 수 있다.
- 하지만 큰 규모의 웹 어플리케이션(트위터, 페이스북 등)에서는 스크롤을 내리다 보면 
    정말 수많은 데이터가 로딩되고 각 데이터를 표현하는 요소도 많아지게 된다.
- 이와 같은 DOM 요소의 개수가 몇 백개 몇 천개 단위로 많아진 상태에서 DOM에 직접 접근하여
    변화를 주다보면 성능상 이슈가 발생하게 된다.
- 이는 DOM 자체가 JavaScript 엔진에 비해 느려서 그런것이 아니라, 브라우저 단에서 DOM의
    변화가 일어나면, CSS를 다시 연산하고 레이아웃을 구성하고 웹페이지를 Repaint하는데서
    시간이 허비되기 때문에 느려진다고 할 수 있다.
- 레이아웃 구성을 Reflow라고 하고, 색상 변경 같은 레이아웃에 관게없는 것들을   
    Repaint라고 한다.
- 즉, 웹브라우저 등의 클라이언트 측의 로직 때문에 어플리케이션의 속도가 느려진다고 볼 수 있다.
- 이러한 HTML마크업을 시각적인 형태로 변환하는 시간이 드는 것은 어쩔수 없다. 따라서
    최소한의 DOM 조작을 통해 처리하는 방식으로 이를 개선할 수 있다.
- 그 중 DOM 작업을 가상화하여 미리 처리한 다음 한꺼번에 적용할 수 있는 방법이 있다.

[Virtual DOM이란]
- Virtual DOM을 이용하면 실제 DOM에 접근하여 조작하는 대신에, 이를 추상화시킨 자바스크립트 
    객체를 구성하여 사용한다.(실제 DOM의 가벼운 복사본이다.)
- 가상 DOM은 실제 DOM의 상태를 메모리 위에 계속 올려두고 DOM에 변경이 있을 때만
    해당 내용을 반영한다.
- 그래서 성능 향상을 가져오게 하는 개념이다.


JSX
[JSX]
- createElement()에 의해 반환되는 리액트 엘리먼트(자바스크립트 객체)를 쉽게 만들기 위한
    자바스크립트 확장 문법이다.
- 리액트는 JSX 사용이 필수가 아니지만 JavaScript코드 내부의 UI 작업을 할 때 시각적 도움
    때문에 많이 사용한다.
- JSX는 문자열도 HTML도 아닌 태그 형태의 자바스크립트 확장 문법으로 JSX Syntax를 입력하면
    React.createElement() 형태의 자바스크립트로 변횐된다.
- Babel은 JSX를 React.createElement()를 호출하여 컴파일 하는 스크립트로 아래 두 예제는
    완전히 동일하다.
- 즉, JSX는 React.createElement()로 변환된다.
예제1]
    const element = (
        <h1 className = "greeting">Hello, React!</h1>
    );

예제2]
    var element = React.createElement("h1" , {className : "greeting"}, "Hello, React!" );

- JSX 태그는 HTML 태그 뿐만 아니라 사용자 정의의 임의 태그로도 구성 될 수 있다.
- JSX내에 자바스크립트 코드를 작성할때는 JSX Expression인 {자바스크립트코드}를 사용하여 작성한다.
- JSX에서 주석처리는 {/*주석*/}으로 처리한다.
- JSX의 속성은 속성값이 자바스크립트 변수일때는 속성명={자바스크립트변수}
                    식이나 일반 값일때는 속성명="속성값"으로 한다.
- JSX를 if와 for루프 안에서 사용할 수 있고, 변수에 할당하고, 인수로 받아들여 함수에서 반환 할 수 있다.
- JSX는 HTML보다 자바스크립트에 가깝기 때문에 React DOM은 Camel Case 형태의 HTML 속성 이름을 사용한다.
- 예를 들어 class 대신 className 그리고 onclick 대신 onClick 을 속성명으로 사용한다.
- JSX에 HTML 태그처럼 style 속성을 적용하려면 style="color:red" 방식으로 하면 에러가 발생한다.
- JSX내에서 위처럼 스타일을 주려면 style={{CamelCase 형태의 css속성명:변수 혹은 스트링}}
- 이때 바깥쪽 {}는 JSX에서 자바스크립트를 사용하기 위함이고 안쪽{}는 자바스크립트 객체(JSON)이다.
- JSX태그에는 자식을 포함할 수 있는데 
    없는 경우는 self closing /> 을 통해 닫고, 
    자식이 있는 경우에는 반드시 최상위 태그 하나로 감싸야한다.

Babel
[Babel]
- Babel은 자바스크립트 컴파일러로 소스 대 소스 컴파일러(transpiler:트랜스파일러) 라고 불린다.
- 트랜스파일러는 어떤 프로그래밍 언어로 작성된 코드를 다른 프로그래밍 언어로 변환시키는 프로그램을 말한다.
- React의 컴포넌트들은 대부분 모던 자바스크립트인 ES6로 작성을 하는데, ES6의 문법을 지원하지 않는 브라우저를 위해
    기존 자바스크립트의 문법(ES5)으로 변환시켜주는 역할을 하는 패키지이다.
- 즉, bable은 새로은 ESNext 문법을 기존의 브라우저에 사용할 수 있게 해준다.
- ESNext란, 2015년 발표된 ES6 이후의 모든 버전의 자바스크립트를 말한다.

component
[component]
- 재사용이 가능한 UI 모음이다.
- 함수형 component 와 클래스형 component 두가지가 있다.
- 함수형 component는 상태를 유지할 수 없다. 그래서 변화하는 데이터를 가지려면, 클래스형 component로 만들어야한다.
- 그래서 함수형 component를 stateless 하다 라고 하며 , 클래스형 component를 stateful 하다고 한다.
- 함수형 component는 props를 입력으로 받아서 JSX(React Element)를 출력(리턴)하는 기능을 수행한다.
- 클래스형 component는 state를 가질수 있고, 반드시 render()함수를 가져야한다.
    따라서 변화하는 데이터가 있는 component는 클래스 component로 만든다.
- 함수형 component는 함수 호출이고 
    클래스형 component는 생성자 함수 호출이다.
- 함수형 component는 메모리를 적게 사용한다 그리고 생명주기가 없다. 하지만
    클래스형 component는 생명주기를 가지고 있다.

함수형 component
[함수형 component]
- 자바스크립트 함수로 component를 만든다.
- 함수형 component를 만들때 첫글자는 대문자로 만든다.
- props를 입력으로 받아서 JSX(React Element)를 리턴하는 함수로 props는 읽기 전용이다.
방법1] 함수선언문
    function MyClass(){
        return(
            <최상위tag>
                <h1>React로 개발하기</h1>
                <span>플레이어1</span>
            </최상위tag>
        );
    }

방법2] 함수 표현식(익명 함수)
const MyClass = function(){
    return (
        <최상위tag>
            <h1>React로 개발하기</h1>
            <span>플레이어1</span>
        </최상위tag>
    );
}

방법3] 화살표함수(Arrow Function)
const MyClass = () => (
        <최상위tag>
            <h1>React로 개발하기</h1>
            <span>플레이어1</span>
        </최상위tag>   
);


클래스형 component
[클래스형 component]
- ES6에 새로 추가된 class로 component를 만든다.
- React의 component를 상속받고 render() 함수를 반드시 오버라이딩 해야한다. 그리고 
    render() 함수는 React Element를 반환한다.
- class로 만든 component는 생명주기를 가지고 있다.
- 상태 관리가 필요한 component는 class로 component를 만든다. 즉 state를 가질 수 있다.
- 내부적으로 props 객체를 포함하고 있다. 함수형 component에서는 함수의 인자로 props를 전달받지만
    클래스형 component에서는 this.props로 접근한다.
형식]
    class 컴포넌트명 extends React.Component{
        render(){
            return(

            );
        }
    }


props와 state
[props]
- 읽기 전용으로 태그의 속성 형태로 부모에서 탑-다운 방식으로 자식에게 내려보내는 데이터를 의미한다.
- 즉, props는 읽기 전용이기 때문에 최상단 엘리먼트가 모든 props를 가지고 이를 자식 component에 
    태그 속성 형태로 넘겨주는 형태가 바람직하다.
- props를 받은 자식에서는 변경이 불가능하다. 바꾸려면 이벤트를 통해 부모에게 요청해야 한다.
- 왜냐하면 자식에서 변경시 부모는 그 변경된 값을 알 수 없다. 즉, 상태 관리를 할 수 없는 문제점이 
    생기기 때문에 읽기전용 속성인 것이다.
- 속성값이 명시적으로 true인 경우는 생략해도 된다. 또한 속성값은 더블 쿼테이션으로 감싸는 것이 일반적이다.

[state]
- state는 변하는 데이터로 클래스 컴포넌트에서만 사용할 수 있다.
- 변하는 데이터가 있다면 그 상태를 state로 관리하고 state의 값을 변경하게 되면 state와 연결된 뷰가
    자동으로 렌더링 된다.
- setState() 함수로 state를 수정해야 render() 함수가 호출되어 상태가 변환된다.
- 할당문으로 state를 변경하면 render() 함수가 호출되지 않으므로 변화가 반영되지 않는다.
- 특정 자식 component에서만 관리되는 state는 local state라고 하고, 다른 component와 공유되어야 하는
    component는 Top레벨 component에 state를 두고 공유해야 하는데 이와 같은 component를
    application state라고 한다.


------------------------------------------------2020-06-17----------------------------------------------------------------

***** component의 라이프 사이클(수명주기) *****
component가 브라우저에 보일때, 사라질때 혹은 업데이트 등이 발생할때 호출되는 메소드이다.

** component 초기 생성과 관련된 메소드

[constructor]
- 생성자 함수로 component가 생성될때 호출된다.

[componentWillMount] -- 권장X
-component가 화면에 보이기 직전에 호출되는 메소드로 리액트 v16.3에서는 해당 메소드가   
    deprecated 되었다.
    deprecated : Deprecated의 사전적 의미를 찾아보면 
        “중요도가 떨어져 더 이상 사용되지 않고 앞으로는 사라지게 될”이란 의미의 형용사다. 
        자바 API에서 Deprecated란 단어를 종종 찾아볼 수 있는데 
        클래스나 메소드에 Deprecated가 붙어 있다면 앞으로는 사용하지 않는 것이 좋다. 
        자바 API는 하위 호환성을 고려하여 설계되어 있기 때문에 
        버전업이 되어 더 이상 사용되지 않는 
        클래스나 메소드라도 바로 삭제하지 않고 Deprecated라는 단어를 사용하여 표시한다.
- v16.3 이후부터는 UNSAFE-componentWillMount()라는 이름으로 사용된다.
- 이 메소드에서 하던 일들은 constructor 와 componentDidMount에서 충분히 처리할 수 있다.


[componentDidMount]
- component가 화면에 보일 때 호출되는 메소드로 주로 네트웤으로 외부 API를 불러오거나
    Ajax 요청을 하는 작업 등을 여기서 한다.



** component 업데이트와 관련된 메소드
component의 업데이트는 props의 변화 그리고 state의 변화에 따라 결정된다.

[componentWillReceiveProps]-- 권장X
- component가 새로운 props를 받게 됐을 때 호출된다. 여기에서는 주로 state가 props에 따라
    변해야 하는 로직을 작성한다. 새로 받게 될 props는 nextProps로 파악 할 수 있다.
    this.props는 업데이트 되기 전이다.
- 이 메소드 또한 v16.3부터 deprecate 된다. v16.3부터는 UNSAFE_componentWillReceiveProps()라는
    이름으로 제공된다.
- 그리고, 이 기능은 상황에 따라 새로운 추가된 메소드인 getDerivedStateFromProps로 대체 할 수 있다.

[getDerivedStateFromProps]
- v16.3 이후에 새롭게 추가된 메소드로 props로 받아온 값을 state로 동기화 하는 작업을 해줘야하는
    경우에 사용된다.

[shouldComponentUpdate]
- component를 최적화(Optimizer)와 관련된 메소드이다. 최적화란 불필요한 렌더링 작업을
    막는 것을 말한다.
- 리액트에서는 변화가 발생하는 부분만 업데이트를 해준다. 그 이유는 변화가 발생한 부분을
    감지해내기 위해 Virtual DOM에 한번 Rerendering(리렌더링) 하기 때문이다.
- 이는 다른 말로 자식 component의 상태가 업데이트 되지 않아도 부모 component가 
    리렌더링 되면 자식 component들도 렌더링(render()함수 호출) 된다는 것이다.
    물론 자식 component에 변화가 없으면 실제 자식 DOM조작은 하지 않는다.
    그냥 Virtual DOM에만 렌더링 할 뿐이다.
- 만약 component가 무수히 많이 렌더링된다면 CPU 자원을 낭비하게 되는것이다.
    낭비되는 CPU자원을 줄이기 위해서 우리는 Virtual DOM에 리렌더링 하는 것도 불필요할 
    경우엔 방지하기 위해서 shouldComponentUpdate를 작성한다.
- 이 메소드는 기본적으로 true를 반환한다. false를 반환하면 render함수를 호출하지 않는다.
- 즉, 특정 조건에서 false를 반환해 render함수를 호출하지 않도록 할 수 있다.

[componentWillUpdate]-- 권장X
- shouldComponentUpdate에서 true를 반환했을때만 호출된다.
- 여기선 주로 애니메이션 효과를 초기화하거나 이벤트 리스너를 없애는 작업을 한다.
- 이 함수가 호출되고 난 다음에는 render()가 호출된다.
- 이 메소드 또한 v16.3 이후 deprecate 되었다.
- 기존의 기능은 getSnapshotBeforeUpdate메소드로 대체 될 수 있다.

[getSnapshotBeforeUpdate]
- render() 함수가 호출되고 나서 호출되는 메소드로 실제 DOM에 변화가 일어나기 직전의
    DOM 상태를 가져올 수 있다.
- 이 메소드에서 리턴하는 값은 componentDidUpdate 에서 3번째 파리미터로 받아올 수 있다.

[componentDidUpdate]
- 역시 component에서 render()를 호출하고 난 다음에 발생하는 메소드로 getSnapshotBeforeUpdate()
    이후에 호출된다.
- this.props 와 this.state가 변화된 상태이다.
- 사용한 외부 라이브러리를 해제하는 경우에 사용한다.



이벤트 처리
- React 이벤트 핸들러는 Camel Case 구문으로 작성해야 한다.
    * onclick => 에러 발생 | onClick => 정상 동작
- 이벤트 핸들러에서 함수 호출시 중괄호 안에 작성한다.
    * onClick={shoot}
- 함수 내에서 this를 사용하는 경우, 호출한 대상에 관계없이 항상 정의된 객체를 가리키게
    하려면 화살표 함수를 사용해야 한다.
- 만약 일반 함수를 사용해야 한다면, bind()함수를 이용해서 객체와 함수를 바인딩 해야한다.










































